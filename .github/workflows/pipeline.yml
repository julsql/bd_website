name: Test and deploy

on:
  push:
    branches:
      - '**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# DÃ©finir les jobs
jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest

    services:
      postgres_test:
        image: postgres:15
        ports:
          - 5452:5432
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: $POSTGRES_DB
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: false
      POST_TOKEN: ${{ secrets.POST_TOKEN }}
      GSHEET_CREDENTIALS: config/codexio.json
      GOOGLE_KEY: ${{ secrets.GOOGLE_KEY }}
      DJANGO_ENV: test
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: $POSTGRES_DB
      EMAIL_HOST_USER: $EMAIL_HOST_USER
      EMAIL_HOST_PASSWORD: $EMAIL_HOST_PASSWORD

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create service account key from secret
        run: echo '${{ secrets.SERVICE_ACCOUNT_CONFIG }}' > bd/config/codexio.json

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5452; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run init.sql manually
        run: |
          PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -p 5452 -U $POSTGRES_USER -d $POSTGRES_DB -f bd/database/init.sql

      - name: Run tests
        run: |
          cd bd
          python manage.py migrate
          python manage.py test

  deploy:
    name: Deploy to server
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /home/debian/websites/bd_website
            git pull
            docker-compose down
            docker-compose build --no-cache
            docker-compose up -d
            docker image prune -f
